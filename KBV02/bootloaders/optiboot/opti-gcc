#!/usr/bin/perl -CS

# opti-gcc.pl
#
# Compiles optiboot with the right start address, end address and pgm_write_page() jump.
# Could probably be done with a suitable linker script - but there you go.
#
# published under GNU General Public License, version 3 (GPL-3.0)
# author Stefan Rueger
#
# v 1.0
# 09.07.2016

use strict;
use warnings;
use File::Basename;
use File::HomeDir;
use Capture::Tiny ':all';

my $prognam = basename($0);
my $Usage = <<"END_USAGE";
Syntax: opti-gcc [opts] optiboot.c
Function: compiles optiboot with the right addresses until compilation converges

Finding the right address for the bootloader is a two-step, sometimes three-step process: On
first compilation a START address is used that works with the target mcu, but will be too low.
Once the bootloader is complied and linked, opti-gcc compiles again using size info and optiboot
version bits from the newly created .elf file. The bootloader placement depends on the type of
bootloader support that the mcu offers, and on whether the bootloader is a virtual boot partition
(VBP - as encoded in the version bits), which requires no bootloader support by the mcu. For
example, you might have compiled a bootloader for the ATmega1284P with VBP support that fits into
512 bytes. This will be placed in the topmost 512 bytes of the flash space. However, if compiled
as normal bootloader without VBP support, it must be placed in the top 1024 bytes, because that's
the smallest boot section that this mcu offers.  Opti-gcc aligns the bootloader with the correct
SPM page size and/or boot section size. In a slight complication of things, it may happen that
the size of the bootloader changes after the second step. This is because the bootloader address
is used as compile-time constant, which when changed, can be used in a different way by the
optimiser. This is normally not a problem, but when the new size ticks over the bootsection or
page size limit, this will trigger a linker error after the second step. To resolve this,
opti-gcc must compile and link a third time, this time adding a few bytes of slack to the size.
In case you requested the export of pgm_write_page() in the bootloader source, opti-gcc computes
the appropriate rjmp call and places it 4 bytes under the end of the bootloader, ie, at the end
of flash just before the two version bytes. Voila! 
END_USAGE

use constant {
# flags in table below
  _NOBOOT => 0, _SINGLE => 1, _HIGH   => 2, _EXTEND => 3,
# bitmask in version indicates virtual boot partition  
  O_VBPMASK => 0x0C, 
# index in table below
  _sig0 => 0, _sig1 => 1, _sig2 => 2, _boot => 3, _numfuses => 4,
  _pagesz => 5, _flashsz => 6, _bootsz => 7, _bootstart => 8,
};

# Extracted this table from the avrxml project - a cool resource
my %uP = (
# ATtiny10 =>        [0x1e, 0x90, 0x03, _NOBOOT, 1,  0x80,   0x400,     -1,      -1],
  ATtiny20 =>        [0x1e, 0x91, 0x0f, _NOBOOT, 1,  0x80,   0x800,     -1,      -1],
  ATtiny40 =>        [0x1e, 0x92, 0x0e, _NOBOOT, 1,  0x80,  0x1000,     -1,      -1],
# ATtiny4 =>         [0x1e, 0x8f, 0x0a, _NOBOOT, 1,  0x80,   0x200,     -1,      -1], # Bootloader for a device with 512 byte flash? good luck :)
# ATtiny5 =>         [0x1e, 0x8f, 0x09, _NOBOOT, 1,  0x80,   0x200,     -1,      -1],
# ATtiny9 =>         [0x1e, 0x90, 0x08, _NOBOOT, 1,  0x80,   0x400,     -1,      -1],
  AT90CAN128 =>      [0x1e, 0x97, 0x81,   _HIGH, 3, 0x100, 0x20000,  0x400, 0x1fc00],
  AT90CAN32 =>       [0x1e, 0x95, 0x81,   _HIGH, 3, 0x100,  0x8000,  0x400,  0x7c00],
  AT90CAN64 =>       [0x1e, 0x96, 0x81,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  AT90PWM161 =>      [0x1e, 0x94, 0x8B,   _HIGH, 3,  0x80,  0x4000,  0x100,  0x3f00],
  AT90PWM1 =>        [0x1e, 0x93, 0x83, _EXTEND, 3,  0x40,  0x2000,  0x100,  0x1f00],
  AT90PWM216 =>      [0x1e, 0x94, 0x83, _EXTEND, 3,  0x80,  0x4000,  0x200,  0x3e00],
  AT90PWM2B =>       [0x1e, 0x93, 0x83, _EXTEND, 3,  0x40,  0x2000,  0x100,  0x1f00],
  AT90PWM316 =>      [0x1e, 0x94, 0x83, _EXTEND, 3,  0x80,  0x4000,  0x200,  0x3e00],
  AT90PWM3B =>       [0x1e, 0x93, 0x83, _EXTEND, 3,  0x40,  0x2000,  0x100,  0x1f00],
  AT90PWM81 =>       [0x1e, 0x93, 0x88,   _HIGH, 3,  0x40,  0x2000,  0x100,  0x1f00],
  AT90USB1286 =>     [0x1e, 0x97, 0x82,   _HIGH, 3, 0x100, 0x20000,  0x400, 0x1fc00],
  AT90USB1287 =>     [0x1e, 0x97, 0x82,   _HIGH, 3, 0x100, 0x20000,  0x400, 0x1fc00],
  AT90USB162 =>      [0x1e, 0x94, 0x82,   _HIGH, 3,  0x80,  0x4000,  0x200,  0x3e00],
  AT90USB646 =>      [0x1e, 0x96, 0x82,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  AT90USB647 =>      [0x1e, 0x96, 0x82,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  AT90USB82 =>       [0x1e, 0x94, 0x82,   _HIGH, 3,  0x80,  0x2000,  0x200,  0x1e00],
  ATA6285 =>         [0x1e, 0x93, 0x82,   _HIGH, 2,  0x40,  0x2000,  0x100,  0x1f00],
  ATA6286 =>         [0x1e, 0x93, 0x82,   _HIGH, 2,  0x40,  0x2000,  0x100,  0x1f00],
  ATmega1280 =>      [0x1e, 0x97, 0x03,   _HIGH, 3, 0x100, 0x20000,  0x400, 0x1fc00],
  ATmega1281 =>      [0x1e, 0x97, 0x04,   _HIGH, 3, 0x100, 0x20000,  0x400, 0x1fc00],
  ATmega1284P =>     [0x1e, 0x97, 0x05,   _HIGH, 3, 0x100, 0x20000,  0x400, 0x1fc00],
  ATmega1284 =>      [0x1e, 0x97, 0x06,   _HIGH, 3, 0x100, 0x20000,  0x400, 0x1fc00],
  ATmega128A =>      [0x1e, 0x97, 0x02,   _HIGH, 3, 0x100, 0x20000,  0x400, 0x1fc00],
  ATmega128RFA1 =>   [0x1e, 0xa7, 0x01,   _HIGH, 3, 0x100, 0x20000,  0x400, 0x1fc00],
  ATmega128 =>       [0x1e, 0x97, 0x02,   _HIGH, 3, 0x100, 0x20000,  0x400, 0x1fc00],
  ATmega162 =>       [0x1e, 0x94, 0x04,   _HIGH, 3,  0x80,  0x4000,  0x100,  0x3f00],
  ATmega164A =>      [0x1e, 0x94, 0x0f,   _HIGH, 3,  0x80,  0x4000,  0x100,  0x3f00],
  ATmega164PA =>     [0x1e, 0x94, 0x0a,   _HIGH, 3,  0x80,  0x4000,  0x100,  0x3f00],
  ATmega164P =>      [0x1e, 0x94, 0x0a,   _HIGH, 3,  0x80,  0x4000,  0x100,  0x3f00],
  ATmega165A =>      [0x1e, 0x94, 0x10,   _HIGH, 3,  0x80,  0x4000,  0x100,  0x3f00],
  ATmega165PA =>     [0x1e, 0x94, 0x07,   _HIGH, 3,  0x80,  0x4000,  0x100,  0x3f00],
  ATmega165P =>      [0x1e, 0x94, 0x07,   _HIGH, 3,  0x80,  0x4000,  0x100,  0x3f00],
  ATmega168A =>      [0x1e, 0x94, 0x06, _EXTEND, 3,  0x80,  0x4000,  0x100,  0x3f00],
  ATmega168PA =>     [0x1e, 0x94, 0x0b, _EXTEND, 3,  0x80,  0x4000,  0x100,  0x3f00],
  ATmega168P =>      [0x1e, 0x94, 0x0b, _EXTEND, 3,  0x80,  0x4000,  0x100,  0x3f00],
  ATmega168 =>       [0x1e, 0x94, 0x06, _EXTEND, 3,  0x80,  0x4000,  0x100,  0x3f00],
  ATmega169A =>      [0x1e, 0x94, 0x11,   _HIGH, 3,  0x80,  0x4000,  0x100,  0x3f00],
  ATmega169PA =>     [0x1e, 0x94, 0x05,   _HIGH, 3,  0x80,  0x4000,  0x100,  0x3f00],
  ATmega169P =>      [0x1e, 0x94, 0x05,   _HIGH, 3,  0x80,  0x4000,  0x100,  0x3f00],
  ATmega16A =>       [0x1e, 0x94, 0x03,   _HIGH, 2,  0x80,  0x4000,  0x100,  0x3f00],
  ATmega16HVB =>     [0x1e, 0x94, 0x0d,   _HIGH, 2,  0x80,  0x4000,  0x200,  0x3e00],
  ATmega16M1 =>      [0x1e, 0x94, 0x84,   _HIGH, 3,  0x80,  0x4000,  0x200,  0x3e00],
  ATmega16U2 =>      [0x1e, 0x94, 0x89,   _HIGH, 3,  0x80,  0x4000,  0x200,  0x3e00],
  ATmega16U4 =>      [0x1e, 0x94, 0x88,   _HIGH, 3,  0x80,  0x4000,  0x200,  0x3e00],
  ATmega16 =>        [0x1e, 0x94, 0x03,   _HIGH, 2,  0x80,  0x4000,  0x100,  0x3f00],
  ATmega2560 =>      [0x1e, 0x98, 0x01,   _HIGH, 3, 0x100, 0x40000,  0x400, 0x3fc00],
  ATmega2561 =>      [0x1e, 0x98, 0x02,   _HIGH, 3, 0x100, 0x40000,  0x400, 0x3fc00],
  ATmega324A =>      [0x1e, 0x95, 0x15,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega324PA =>     [0x1e, 0x95, 0x11,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega324P =>      [0x1e, 0x95, 0x08,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega3250A =>     [0x1e, 0x95, 0x06,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega3250PA =>    [0x1e, 0x95, 0x0e,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega3250P =>     [0x1e, 0x95, 0x0e,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega3250 =>      [0x1e, 0x95, 0x06,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega325A =>      [0x1e, 0x95, 0x05,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega325PA =>     [0x1e, 0x95, 0x0d,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega325P =>      [0x1e, 0x95, 0x0d,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega325 =>       [0x1e, 0x95, 0x05,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega328P =>      [0x1e, 0x95, 0x0f,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega328 =>       [0x1e, 0x95, 0x14,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega3290A =>     [0x1e, 0x95, 0x04,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega3290PA =>    [0x1e, 0x95, 0x0c,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega3290P =>     [0x1e, 0x95, 0x0c,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega3290 =>      [0x1e, 0x95, 0x04,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega329A =>      [0x1e, 0x95, 0x03,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega329PA =>     [0x1e, 0x95, 0x0b,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega329P =>      [0x1e, 0x95, 0x0b,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega329 =>       [0x1e, 0x95, 0x03,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega32A =>       [0x1e, 0x95, 0x02,   _HIGH, 2,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega32C1 =>      [0x1e, 0x95, 0x86,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega32HVB =>     [0x1e, 0x95, 0x10,   _HIGH, 2,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega32M1 =>      [0x1e, 0x95, 0x84,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega32U2 =>      [0x1e, 0x95, 0x8a,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega32U4 =>      [0x1e, 0x95, 0x87,   _HIGH, 3,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega32 =>        [0x1e, 0x95, 0x02,   _HIGH, 2,  0x80,  0x8000,  0x200,  0x7e00],
  ATmega48A =>       [0x1e, 0x92, 0x05, _NOBOOT, 3,  0x40,  0x1000,     -1,      -1],
  ATmega48PA =>      [0x1e, 0x92, 0x0a, _NOBOOT, 3,  0x40,  0x1000,     -1,      -1],
  ATmega48P =>       [0x1e, 0x92, 0x0a, _NOBOOT, 3,  0x40,  0x1000,     -1,      -1],
  ATmega48 =>        [0x1e, 0x92, 0x05, _NOBOOT, 3,  0x40,  0x1000,     -1,      -1],
  ATmega640 =>       [0x1e, 0x96, 0x08,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega644A =>      [0x1e, 0x96, 0x09,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega644PA =>     [0x1e, 0x96, 0x0a,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega644P =>      [0x1e, 0x96, 0x0a,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega644 =>       [0x1e, 0x96, 0x09,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega6450A =>     [0x1e, 0x96, 0x06,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega6450P =>     [0x1e, 0x96, 0x0e,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega6450 =>      [0x1e, 0x96, 0x06,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega645A =>      [0x1e, 0x96, 0x05,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega645P =>      [0x1e, 0x96, 0x0D,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega645 =>       [0x1e, 0x96, 0x05,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega6490A =>     [0x1e, 0x96, 0x04,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega6490P =>     [0x1e, 0x96, 0x0C,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega6490 =>      [0x1e, 0x96, 0x04,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega649A =>      [0x1e, 0x96, 0x03,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega649P =>      [0x1e, 0x96, 0x0b,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega649 =>       [0x1e, 0x96, 0x03,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega64A =>       [0x1e, 0x96, 0x02,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega64C1 =>      [0x1e, 0x96, 0x86,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega64M1 =>      [0x1e, 0x96, 0x84,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega64 =>        [0x1e, 0x96, 0x02,   _HIGH, 3, 0x100, 0x10000,  0x400,  0xfc00],
  ATmega8515 =>      [0x1e, 0x93, 0x06,   _HIGH, 2,  0x40,  0x2000,  0x100,  0x1f00],
  ATmega8535 =>      [0x1e, 0x93, 0x08,   _HIGH, 2,  0x40,  0x2000,  0x100,  0x1f00],
  ATmega88A =>       [0x1e, 0x93, 0x0a, _EXTEND, 3,  0x40,  0x2000,  0x100,  0x1f00],
  ATmega88PA =>      [0x1e, 0x93, 0x0f, _EXTEND, 3,  0x40,  0x2000,  0x100,  0x1f00],
  ATmega88P =>       [0x1e, 0x93, 0x0f, _EXTEND, 3,  0x40,  0x2000,  0x100,  0x1f00],
  ATmega88 =>        [0x1e, 0x93, 0x0a, _EXTEND, 3,  0x40,  0x2000,  0x100,  0x1f00],
  ATmega8A =>        [0x1e, 0x93, 0x07,   _HIGH, 2,  0x40,  0x2000,  0x100,  0x1f00],
  ATmega8U2 =>       [0x1e, 0x93, 0x89,   _HIGH, 3,  0x80,  0x2000,  0x200,  0x1e00],
  ATmega8 =>         [0x1e, 0x93, 0x07,   _HIGH, 2,  0x40,  0x2000,  0x100,  0x1f00],
# ATtiny13A =>       [0x1e, 0x90, 0x07, _NOBOOT, 2,  0x20,   0x400,     -1,      -1],
# ATtiny13 =>        [0x1e, 0x90, 0x07, _NOBOOT, 2,  0x20,   0x400,     -1,      -1],
  ATtiny1634 =>      [0x1e, 0x94, 0x12, _NOBOOT, 3,  0x20,  0x4000,     -1,      -1],
  ATtiny167 =>       [0x1e, 0x94, 0x87, _NOBOOT, 3,  0x80,  0x4000,     -1,      -1],
  ATtiny2313A =>     [0x1e, 0x91, 0x0a, _NOBOOT, 3,  0x20,   0x800,     -1,      -1],
  ATtiny2313 =>      [0x1e, 0x91, 0x0a, _NOBOOT, 3,  0x20,   0x800,     -1,      -1],
  ATtiny24A =>       [0x1e, 0x91, 0x0b, _NOBOOT, 3,  0x20,   0x800,     -1,      -1],
  ATtiny24 =>        [0x1e, 0x91, 0x0b, _NOBOOT, 3,  0x20,   0x800,     -1,      -1],
  ATtiny25 =>        [0x1e, 0x91, 0x08, _NOBOOT, 3,  0x20,   0x800,     -1,      -1],
  ATtiny261A =>      [0x1e, 0x91, 0x0c, _NOBOOT, 3,  0x20,   0x800,     -1,      -1],
  ATtiny261 =>       [0x1e, 0x91, 0x0c, _NOBOOT, 3,  0x20,   0x800,     -1,      -1],
  ATtiny26 =>        [0x1e, 0x91, 0x09, _NOBOOT, 2,  0x20,   0x800,     -1,      -1],
  ATtiny28 =>        [0x1e, 0x91, 0x07, _NOBOOT, 1,  0x00,   0x800,     -1,      -1], # no SPM_PAGESIZE?
  ATtiny4313 =>      [0x1e, 0x92, 0x0d, _NOBOOT, 3,  0x40,  0x1000,     -1,      -1],
  ATtiny43U =>       [0x1e, 0x92, 0x0c, _NOBOOT, 3,  0x40,  0x1000,     -1,      -1],
  ATtiny44A =>       [0x1e, 0x92, 0x07, _NOBOOT, 3,  0x40,  0x1000,     -1,      -1],
  ATtiny44 =>        [0x1e, 0x92, 0x07, _NOBOOT, 3,  0x40,  0x1000,     -1,      -1],
  ATtiny45 =>        [0x1e, 0x92, 0x06, _NOBOOT, 3,  0x40,  0x1000,     -1,      -1],
  ATtiny461A =>      [0x1e, 0x92, 0x08, _NOBOOT, 3,  0x40,  0x1000,     -1,      -1],
  ATtiny461 =>       [0x1e, 0x92, 0x08, _NOBOOT, 3,  0x40,  0x1000,     -1,      -1],
  ATtiny48 =>        [0x1e, 0x92, 0x09, _NOBOOT, 3,  0x40,  0x1000,     -1,      -1],
  ATtiny828 =>       [0x1e, 0x93, 0x14, _EXTEND, 3,  0x40,  0x2000,  0x100,  0x1f00],
  ATtiny84A =>       [0x1e, 0x93, 0x0c, _NOBOOT, 3,  0x40,  0x2000,     -1,      -1],
  ATtiny84 =>        [0x1e, 0x93, 0x0c, _NOBOOT, 3,  0x40,  0x2000,     -1,      -1],
  ATtiny85 =>        [0x1e, 0x93, 0x0b, _NOBOOT, 3,  0x40,  0x2000,     -1,      -1],
  ATtiny861A =>      [0x1e, 0x93, 0x0d, _NOBOOT, 3,  0x40,  0x2000,     -1,      -1],
  ATtiny861 =>       [0x1e, 0x93, 0x0d, _NOBOOT, 3,  0x40,  0x2000,     -1,      -1],
  ATtiny87 =>        [0x1e, 0x93, 0x87, _NOBOOT, 3,  0x80,  0x2000,     -1,      -1],
  ATtiny88 =>        [0x1e, 0x93, 0x11, _NOBOOT, 3,  0x40,  0x2000,     -1,      -1],
  ATxmega128A1U =>   [0x1E, 0x97, 0x4C, _SINGLE, 6, 0x200, 0x20000, 0x2000, 0x20000],
  ATxmega128A1 =>    [0x1E, 0x97, 0x4C, _SINGLE, 6, 0x200, 0x20000, 0x2000, 0x20000],
  ATxmega128A3U =>   [0x1E, 0x97, 0x42, _SINGLE, 6, 0x200, 0x20000, 0x2000, 0x20000],
  ATxmega128A3 =>    [0x1E, 0x97, 0x42, _SINGLE, 6, 0x200, 0x20000, 0x2000, 0x20000],
  ATxmega128A4U =>   [0x1E, 0x97, 0x46, _SINGLE, 6, 0x100, 0x20000, 0x2000, 0x20000],
  ATxmega128B1 =>    [0x1E, 0x97, 0x4D, _SINGLE, 6, 0x100, 0x20000, 0x2000, 0x20000],
  ATxmega128B3 =>    [0x1E, 0x97, 0x4B, _SINGLE, 6, 0x100, 0x20000, 0x2000, 0x20000],
  ATxmega128C3 =>    [0x1E, 0x97, 0x52, _SINGLE, 6, 0x200, 0x20000, 0x2000, 0x20000],
  ATxmega128D3 =>    [0x1E, 0x97, 0x48, _SINGLE, 6, 0x200, 0x20000, 0x2000, 0x20000],
  ATxmega128D4 =>    [0x1E, 0x97, 0x47, _SINGLE, 6, 0x100, 0x20000, 0x2000, 0x20000],
  ATxmega16A4U =>    [0x1E, 0x94, 0x41, _SINGLE, 6, 0x100,  0x4000, 0x1000,  0x4000],
  ATxmega16A4 =>     [0x1E, 0x94, 0x41, _SINGLE, 6, 0x100,  0x4000, 0x1000,  0x4000],
  ATxmega16C4 =>     [0x1E, 0x94, 0x43, _SINGLE, 6, 0x100,  0x4000, 0x1000,  0x4000],
  ATxmega16D4 =>     [0x1E, 0x94, 0x42, _SINGLE, 6, 0x100,  0x4000, 0x1000,  0x4000],
  ATxmega192A3U =>   [0x1E, 0x97, 0x44, _SINGLE, 6, 0x200, 0x30000, 0x2000, 0x30000],
  ATxmega192A3 =>    [0x1E, 0x97, 0x44, _SINGLE, 6, 0x200, 0x30000, 0x2000, 0x30000],
  ATxmega192C3 =>    [0x1E, 0x97, 0x51, _SINGLE, 6, 0x200, 0x30000, 0x2000, 0x30000],
  ATxmega192D3 =>    [0x1E, 0x97, 0x49, _SINGLE, 6, 0x200, 0x30000, 0x2000, 0x30000],
  ATxmega256A3BU =>  [0x1E, 0x98, 0x43, _SINGLE, 6, 0x200, 0x40000, 0x2000, 0x40000],
  ATxmega256A3B =>   [0x1E, 0x98, 0x43, _SINGLE, 6, 0x200, 0x40000, 0x2000, 0x40000],
  ATxmega256A3U =>   [0x1E, 0x98, 0x42, _SINGLE, 6, 0x200, 0x40000, 0x2000, 0x40000],
  ATxmega256A3 =>    [0x1E, 0x98, 0x42, _SINGLE, 6, 0x200, 0x40000, 0x2000, 0x40000],
  ATxmega256C3 =>    [0x1E, 0x98, 0x46, _SINGLE, 6, 0x200, 0x40000, 0x2000, 0x40000],
  ATxmega256D3 =>    [0x1E, 0x98, 0x44, _SINGLE, 6, 0x200, 0x40000, 0x2000, 0x40000],
  ATxmega32A4U =>    [0x1E, 0x95, 0x41, _SINGLE, 6, 0x100,  0x8000, 0x1000,  0x8000],
  ATxmega32A4 =>     [0x1E, 0x95, 0x41, _SINGLE, 6, 0x100,  0x8000, 0x1000,  0x8000],
  ATxmega32C4 =>     [0x1E, 0x95, 0x44, _SINGLE, 6, 0x100,  0x8000, 0x1000,  0x8000],
  ATxmega32D4 =>     [0x1E, 0x95, 0x42, _SINGLE, 6, 0x100,  0x8000, 0x1000,  0x8000],
  ATxmega384C3 =>    [0x1E, 0x98, 0x45, _SINGLE, 6, 0x200, 0x60000, 0x2000, 0x60000],
  ATxmega384D3 =>    [0x1E, 0x98, 0x47, _SINGLE, 6, 0x200, 0x60000, 0x2000, 0x60000],
  ATxmega64A1U =>    [0x1E, 0x96, 0x4E, _SINGLE, 6, 0x100, 0x10000, 0x1000, 0x10000],
  ATxmega64A1 =>     [0x1E, 0x96, 0x4E, _SINGLE, 6, 0x100, 0x10000, 0x1000, 0x10000],
  ATxmega64A3U =>    [0x1E, 0x96, 0x42, _SINGLE, 6, 0x100, 0x10000, 0x1000, 0x10000],
  ATxmega64A3 =>     [0x1E, 0x96, 0x42, _SINGLE, 6, 0x100, 0x10000, 0x1000, 0x10000],
  ATxmega64A4U =>    [0x1E, 0x96, 0x46, _SINGLE, 6, 0x100, 0x10000, 0x1000, 0x10000],
  ATxmega64B1 =>     [0x1E, 0x96, 0x52, _SINGLE, 6, 0x100, 0x10000, 0x1000, 0x10000],
  ATxmega64B3 =>     [0x1E, 0x96, 0x51, _SINGLE, 6, 0x100, 0x10000, 0x1000, 0x10000],
  ATxmega64C3 =>     [0x1E, 0x96, 0x49, _SINGLE, 6, 0x100, 0x10000, 0x1000, 0x10000],
  ATxmega64D3 =>     [0x1E, 0x96, 0x4A, _SINGLE, 6, 0x100, 0x10000, 0x1000, 0x10000],
  ATxmega64D4 =>     [0x1E, 0x96, 0x47, _SINGLE, 6, 0x100, 0x10000, 0x1000, 0x10000],
);

my $slack = 0;

die "$Usage\nno unique .elf argument?" if 1 != grep { /^[^-].*elf$/ } @ARGV;
die "no architecture -mmcu=... argument?" if 1 != grep { /^-mmcu/ } @ARGV;

my $elf = (grep { /^[^-].*elf$/ } @ARGV)[0];
my $mcu = (grep { /^-mmcu=/ } @ARGV)[0];
$mcu =~ s/-mmcu=//;
my $novbp = !grep { /^-DVBP=/ } @ARGV;
 
# make mcu name lower case, so that user can specify mcu regardless of case
$uP{lc $_} = delete $uP{$_} for keys %uP;

die "Don't know of mcu architecture $mcu - only know about ". join(", ", keys %uP) if !exists($uP{lc $mcu});

# placement parameters are (start address of bootloader, rjmp opcode, linker start of section, linker start of version)
my (@placement, $nowparams, @injectparams, $runs);

$runs = 10; # max number of runs
$nowparams = getplacement($mcu, $elf);
do {
  @injectparams = (
    sprintf("-DSTART=0x%xUL", $nowparams->[0]),
    sprintf("-DRJMPWP=0x%4x", $nowparams->[2]),
    sprintf("-Wl,--section-start=.text=0x%x", $nowparams->[0]),
    sprintf("-Wl,--section-start=.version=0x%x", $nowparams->[1])
  );

  # add vbp compile option if uP does not support boot section
  push @injectparams, "-DVBP=3" if !$nowparams->[3] && $novbp;

  system("echo", "avr-gcc", @injectparams, @ARGV);
  my ($stdout, $exit) = capture_merged {
    system("avr-gcc", @injectparams, @ARGV);
  };

  my $overlaps = 0;
  my @lines= split "\n", $stdout;
  foreach my $line (@lines) {
    $overlaps = 1 if $line =~ /overlaps section/;
    print "$line\n" if 
      $line !~ /warning: call-clobbered register used for global register variable/ &&
      $line !~ /register uint16_t address asm..r30..;/ &&
      $line !~ /^ *\^ *$/ &&
      $line !~ /: warning: #warning /;
  }

  # did the linker throw an error because of an overlap of .text and .version sections? increase slack;
  $slack += 8 if $exit && $overlaps;
  # any other error: exit
  exit($exit) if $exit && !$overlaps;

  @placement = @$nowparams;
  $nowparams = getplacement($mcu, $elf);
} while(--$runs && ($nowparams->[0] != $placement[0] || $nowparams->[1] != $placement[1] || $nowparams->[2] != $placement[2]));

# # store parameters in file
# my $fname = '.optistart-'.$elf;
# $fname =~ s/.elf$//;
# open(my $out, ">$fname") or die "$prognam: cannot create $fname (stopped)";
# printf $out "START=0x%04x VERSTART=0x%04x RJMPWP=0xc%03x SLACK=%d\n", $placement[0], $placement[1], $placement[2], $slack if $runs;
# close $out;

exit(0);

# return [start addr of bootloader, start addr of version section, rjmp opcode]
#

sub getplacement {
  my ($mcu, $elf) = @_;

  # copy needed properties from table above
  my ($boot, $pagesz, $flashsz, $bootsz, $bootstart) = @{$uP{lc $mcu}}[(_boot, _pagesz, _flashsz, _bootsz, _bootstart)];
  my $hasboot = $bootsz > 0;
  my $pgmwriteoffset;
  
  # No .elf file?  create a "fake" entry this time round, hope file will exist next time for better estimate
  if(! -r $elf) {
    # allow plenty of space and have a "typical" START (0 makes the compiler optimise too much)
    $bootsz = int((0x580+$pagesz-1)/$pagesz)*$pagesz; 
    $bootstart = $flashsz-$bootsz if $boot != _SINGLE;
    $pgmwriteoffset = $bootsz-4;  # creates an artificial endless loop as placeholder
    goto fake;
  }
  
  $pgmwriteoffset = getpgmwriteoffset($elf);
  
  # if $boot == _SINGLE then the mcu has a dedicated boot section - $bootstart/$bootsz is already what we want
  if($boot != _SINGLE) {
    # lex ATtiny28
    $pagesz = 1 if $pagesz < 1;
  
    # examine size of bootloader, add slack and align to mcu's page size
    my $size = int((getsize($elf)+$slack + $pagesz-1)/$pagesz)*$pagesz;
  
    die "page aligned boot loader size is implausible ($size)" if $size < 32;
  
    # mcu w/o bootloader or version byte of bootloader says it's a virtual boot partition
    my $vbp = $boot == _NOBOOT || (getversion($elf) & O_VBPMASK);
  
    if($vbp) {
      # "boot size" is flexible - chose actual size
      $bootsz = $size;
    } else {
      # boot size is encoded in fuses and a multiple of 1, 2, 4 or 8 of $bootsz - choose smallest
      die "Uuuhoh: bootsz entry in muc table is implausible ($bootsz)" if $bootsz < 32;
      while($size > $bootsz) {
        $bootsz *= 2;
      }
    }
    $bootstart = $flashsz - $bootsz;
  }  
  
  fake:
  my $versionsz = defined($pgmwriteoffset)? 4: 2;
  my $rjmpwp = ((defined($pgmwriteoffset)? $pgmwriteoffset: $bootsz-4)-$bootsz+2)/2 & 0xfff;
  
  return [$bootstart, $bootstart+$bootsz-$versionsz, 0xc000 + $rjmpwp, $hasboot];
}
  
# return the size of the executable elf file
#
sub getsize {
  my $elf = shift;
  my $ret;

  open(my $in, "avr-size $elf |") or die "$prognam: cannot pipe size from avr-size $elf (stopped)";

  while(<$in>) {
    chomp;
    my @col = split;
    if($col[-1] eq $elf) {
      printf STDERR "Warning: avr-size reports non-empty data section for $elf. Is this a bootloader?" if $col[1] ne "0" || $col[2] ne "0";
      $ret = 0+$col[0];
      last;
    }
  }
  close $in;
  die "failed to identify size of $elf with avr-size" if !defined($ret);

  return $ret;
}



# return the distance between pgm_write_page and main functions in byte
#
sub getpgmwriteoffset {
  my $elf = shift;
  my ($main, $pgmwrite);

  open(my $in, "avr-nm -g $elf |") or die "$prognam: cannot pipe size from avr-nm -g $elf (stopped)";

  while(<$in>) {
    chomp;
    my @col = split;
    $pgmwrite = hex($col[0]) if $col[2] eq "pgm_write_page";
    $main = hex($col[0]) if $col[2] eq "main";
  }
  close $in;

  return defined($main) && defined($pgmwrite)? $pgmwrite-$main: undef;
}


# return the low byte of the version number in elf that encode optiboot settings
#
sub getversion {
  my $elf = shift;
  my $ret;

  open(my $in, "avr-readelf -x .version $elf |") or die "$prognam: cannot pipe size from avr-readelf $elf (stopped)";

  while(<$in>) {
    chomp;
    my @col = split;
    if(@col == 3 && $col[0] =~ /^0x/) {
      $ret = hex("0x".substr($col[1],-4,2));
      last;
    }
  }
  close $in;
  die "failed to read two-byte number in section .version of $elf with avr-readelf" if !defined($ret);

  return $ret;
}
