
optiboot_virboot8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000252  00001c00  00001c00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00001ffe  00001ffe  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800060  00001e52  000002e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000011  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e7  00000000  00000000  00000321  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000024b  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003aa  00000000  00000000  00000b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000f00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001fc  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000052b  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000016bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001c00 <main>:
#define appstart_vec (0)
#endif // VIRTUAL_BOOT_PARTITION


/* main program starts here */
int main(void) {
    1c00:	1f 92       	push	r1
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    1c06:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
  SP=RAMEND;  // This is done by hardware reset
    1c08:	8f e5       	ldi	r24, 0x5F	; 95
    1c0a:	94 e0       	ldi	r25, 0x04	; 4
    1c0c:	9e bf       	out	0x3e, r25	; 62
    1c0e:	8d bf       	out	0x3d, r24	; 61
   * Pass the reset reason to app.  Also, it appears that an Uno poweron
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */
#if !defined(__AVR_ATmega16__)
  ch = MCUSR;
    1c10:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    1c12:	14 be       	out	0x34, r1	; 52
#else
  ch = MCUCSR;
  MCUCSR = 0;
#endif
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
    1c14:	98 2f       	mov	r25, r24
    1c16:	9d 70       	andi	r25, 0x0D	; 13
    1c18:	09 f0       	breq	.+2      	; 0x1c1c <main+0x1c>
      appStart(ch);
    1c1a:	15 d1       	rcall	.+554    	; 0x1e46 <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    1c1c:	85 e0       	ldi	r24, 0x05	; 5
    1c1e:	8e bd       	out	0x2e, r24	; 46
#endif

#ifndef SOFT_UART
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
  UCSRA = _BV(U2X); //Double speed mode USART
    1c20:	82 e0       	ldi	r24, 0x02	; 2
    1c22:	8b b9       	out	0x0b, r24	; 11
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
    1c24:	88 e1       	ldi	r24, 0x18	; 24
    1c26:	8a b9       	out	0x0a, r24	; 10
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
    1c28:	86 e8       	ldi	r24, 0x86	; 134
    1c2a:	80 bd       	out	0x20, r24	; 32
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    1c2c:	80 e1       	ldi	r24, 0x10	; 16
    1c2e:	89 b9       	out	0x09, r24	; 9
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
    1c30:	8e e0       	ldi	r24, 0x0E	; 14
    1c32:	f6 d0       	rcall	.+492    	; 0x1e20 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    1c34:	bd 9a       	sbi	0x17, 5	; 23
    1c36:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    1c38:	40 e3       	ldi	r20, 0x30	; 48
    1c3a:	5c ef       	ldi	r21, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    1c3c:	34 e0       	ldi	r19, 0x04	; 4
    while(!(TIFR1 & _BV(TOV1)));
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
    LED_PORT ^= _BV(LED);
    1c3e:	20 e2       	ldi	r18, 0x20	; 32
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    1c40:	5d bd       	out	0x2d, r21	; 45
    1c42:	4c bd       	out	0x2c, r20	; 44
    TIFR1 = _BV(TOV1);
    1c44:	38 bf       	out	0x38, r19	; 56
    while(!(TIFR1 & _BV(TOV1)));
    1c46:	08 b6       	in	r0, 0x38	; 56
    1c48:	02 fe       	sbrs	r0, 2
    1c4a:	fd cf       	rjmp	.-6      	; 0x1c46 <main+0x46>
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
    LED_PORT ^= _BV(LED);
    1c4c:	98 b3       	in	r25, 0x18	; 24
    1c4e:	92 27       	eor	r25, r18
    1c50:	98 bb       	out	0x18, r25	; 24
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1c52:	a8 95       	wdr
    1c54:	81 50       	subi	r24, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    1c56:	a1 f7       	brne	.-24     	; 0x1c40 <main+0x40>
	vect = (vect-save_vect_num) & 0x0fff; //substract 'save' interrupt position and wrap around 4096
        // Move RESET jmp target to 'save' vector
        buff[saveVect0] = vect & 0xff;
        buff[saveVect1] = (vect >> 8) | 0xc0; //
        // Add rjump to bootloader at RESET vector
        vect = ((uint16_t)main) &0x0fff; //WARNIG: this works as long as 'main' is in first section
    1c58:	00 e0       	ldi	r16, 0x00	; 0
    1c5a:	1e e0       	ldi	r17, 0x0E	; 14
    1c5c:	1f 70       	andi	r17, 0x0F	; 15
        buff[0] = vect & 0xFF; // rjmp 0x1c00 instruction
	buff[1] = (vect >> 8) | 0xC0;
    1c5e:	81 2f       	mov	r24, r17
    1c60:	80 6c       	ori	r24, 0xC0	; 192
    1c62:	e8 2e       	mov	r14, r24
    1c64:	41 2c       	mov	r4, r1
    1c66:	51 2c       	mov	r5, r1
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    1c68:	23 e0       	ldi	r18, 0x03	; 3
    1c6a:	b2 2e       	mov	r11, r18
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    1c6c:	aa 24       	eor	r10, r10
    1c6e:	a3 94       	inc	r10
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    1c70:	35 e0       	ldi	r19, 0x05	; 5
    1c72:	93 2e       	mov	r9, r19
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    1c74:	41 e1       	ldi	r20, 0x11	; 17
    1c76:	84 2e       	mov	r8, r20
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1c78:	cc d0       	rcall	.+408    	; 0x1e12 <getch>

    if(ch == STK_GET_PARAMETER) {
    1c7a:	81 34       	cpi	r24, 0x41	; 65
    1c7c:	79 f4       	brne	.+30     	; 0x1c9c <main+0x9c>
      unsigned char which = getch();
    1c7e:	c9 d0       	rcall	.+402    	; 0x1e12 <getch>
      verifySpace();
    1c80:	89 83       	std	Y+1, r24	; 0x01
    1c82:	d2 d0       	rcall	.+420    	; 0x1e28 <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	82 38       	cpi	r24, 0x82	; 130
    1c88:	11 f4       	brne	.+4      	; 0x1c8e <main+0x8e>
	  putch(optiboot_version & 0xFF);
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	05 c0       	rjmp	.+10     	; 0x1c98 <main+0x98>
      } else if (which == STK_SW_MAJOR) {
    1c8e:	81 38       	cpi	r24, 0x81	; 129
    1c90:	11 f4       	brne	.+4      	; 0x1c96 <main+0x96>
	  putch(optiboot_version >> 8);
    1c92:	86 e0       	ldi	r24, 0x06	; 6
    1c94:	01 c0       	rjmp	.+2      	; 0x1c98 <main+0x98>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    1c96:	83 e0       	ldi	r24, 0x03	; 3
    1c98:	b8 d0       	rcall	.+368    	; 0x1e0a <putch>
    1c9a:	b4 c0       	rjmp	.+360    	; 0x1e04 <main+0x204>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    1c9c:	82 34       	cpi	r24, 0x42	; 66
    1c9e:	11 f4       	brne	.+4      	; 0x1ca4 <main+0xa4>
      // SET DEVICE is ignored
      getNch(20);
    1ca0:	84 e1       	ldi	r24, 0x14	; 20
    1ca2:	03 c0       	rjmp	.+6      	; 0x1caa <main+0xaa>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    1ca4:	85 34       	cpi	r24, 0x45	; 69
    1ca6:	19 f4       	brne	.+6      	; 0x1cae <main+0xae>
      // SET DEVICE EXT is ignored
      getNch(5);
    1ca8:	85 e0       	ldi	r24, 0x05	; 5
    1caa:	c6 d0       	rcall	.+396    	; 0x1e38 <getNch>
    1cac:	ab c0       	rjmp	.+342    	; 0x1e04 <main+0x204>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    1cae:	85 35       	cpi	r24, 0x55	; 85
    1cb0:	49 f4       	brne	.+18     	; 0x1cc4 <main+0xc4>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    1cb2:	af d0       	rcall	.+350    	; 0x1e12 <getch>
    1cb4:	f8 2e       	mov	r15, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
    1cb6:	ad d0       	rcall	.+346    	; 0x1e12 <getch>
    1cb8:	4f 2c       	mov	r4, r15
    1cba:	51 2c       	mov	r5, r1
    1cbc:	58 2a       	or	r5, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    1cbe:	44 0c       	add	r4, r4
    1cc0:	55 1c       	adc	r5, r5
    1cc2:	9f c0       	rjmp	.+318    	; 0x1e02 <main+0x202>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    1cc4:	86 35       	cpi	r24, 0x56	; 86
    1cc6:	21 f4       	brne	.+8      	; 0x1cd0 <main+0xd0>
      // UNIVERSAL command is ignored
      getNch(4);
    1cc8:	84 e0       	ldi	r24, 0x04	; 4
    1cca:	b6 d0       	rcall	.+364    	; 0x1e38 <getNch>
      putch(0x00);
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	e4 cf       	rjmp	.-56     	; 0x1c98 <main+0x98>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    1cd0:	84 36       	cpi	r24, 0x64	; 100
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <main+0xd6>
    1cd4:	5c c0       	rjmp	.+184    	; 0x1d8e <main+0x18e>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    1cd6:	9d d0       	rcall	.+314    	; 0x1e12 <getch>
    1cd8:	9c d0       	rcall	.+312    	; 0x1e12 <getch>
    1cda:	f8 2e       	mov	r15, r24
      savelength = length;
      desttype = getch();
    1cdc:	9a d0       	rcall	.+308    	; 0x1e12 <getch>
    1cde:	78 2e       	mov	r7, r24
    1ce0:	80 e6       	ldi	r24, 0x60	; 96
    1ce2:	c8 2e       	mov	r12, r24
    1ce4:	d1 2c       	mov	r13, r1
    1ce6:	90 e6       	ldi	r25, 0x60	; 96
    1ce8:	f9 0e       	add	r15, r25

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    1cea:	93 d0       	rcall	.+294    	; 0x1e12 <getch>
    1cec:	f6 01       	movw	r30, r12
    1cee:	81 93       	st	Z+, r24
    1cf0:	6f 01       	movw	r12, r30
      while (--length);
    1cf2:	fe 12       	cpse	r15, r30
    1cf4:	fa cf       	rjmp	.-12     	; 0x1cea <main+0xea>

      // Read command terminator, start reply
      verifySpace();
    1cf6:	98 d0       	rcall	.+304    	; 0x1e28 <verifySpace>

#else
/*
 * AVR with 2-byte ISR Vectors and rjmp
 */
      if ((uint16_t)(void*)address == rstVect0) {
    1cf8:	41 14       	cp	r4, r1
    1cfa:	51 04       	cpc	r5, r1
    1cfc:	01 f5       	brne	.+64     	; 0x1d3e <main+0x13e>
        // This is the reset vector page. We need to live-patch
        // the code so the bootloader runs first.
        //
        // Move RESET vector to 'save' vector
	// Save jmp targets (for "Verify")
	rstVect0_sav = buff[rstVect0];
    1cfe:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <_edata>
    1d02:	20 93 e4 00 	sts	0x00E4, r18	; 0x8000e4 <_edata+0x84>
	rstVect1_sav = buff[rstVect1];
    1d06:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <_edata+0x1>
    1d0a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <_edata+0x85>
	saveVect0_sav = buff[saveVect0];
    1d0e:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <_edata+0x1e>
    1d12:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <_edata+0x86>
	saveVect1_sav = buff[saveVect1];
    1d16:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <_edata+0x1f>
    1d1a:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <_edata+0x87>

	// Instruction is a relative jump (rjmp), so recalculate.
	uint16_t vect=(rstVect0_sav & 0xff) | ((rstVect1_sav & 0x0f)<<8); //calculate 12b displacement
    1d1e:	8f 70       	andi	r24, 0x0F	; 15
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	38 2b       	or	r19, r24
	vect = (vect-save_vect_num) & 0x0fff; //substract 'save' interrupt position and wrap around 4096
    1d24:	2f 50       	subi	r18, 0x0F	; 15
    1d26:	31 09       	sbc	r19, r1
    1d28:	3f 70       	andi	r19, 0x0F	; 15
        // Move RESET jmp target to 'save' vector
        buff[saveVect0] = vect & 0xff;
    1d2a:	20 93 7e 00 	sts	0x007E, r18	; 0x80007e <_edata+0x1e>
        buff[saveVect1] = (vect >> 8) | 0xc0; //
    1d2e:	83 2f       	mov	r24, r19
    1d30:	80 6c       	ori	r24, 0xC0	; 192
    1d32:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <_edata+0x1f>
        // Add rjump to bootloader at RESET vector
        vect = ((uint16_t)main) &0x0fff; //WARNIG: this works as long as 'main' is in first section
        buff[0] = vect & 0xFF; // rjmp 0x1c00 instruction
    1d36:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <_edata>
	buff[1] = (vect >> 8) | 0xC0;
    1d3a:	e0 92 61 00 	sts	0x0061, r14	; 0x800061 <_edata+0x1>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    1d3e:	f5 e4       	ldi	r31, 0x45	; 69
    1d40:	7f 12       	cpse	r7, r31
    1d42:	01 c0       	rjmp	.+2      	; 0x1d46 <main+0x146>
    1d44:	ff cf       	rjmp	.-2      	; 0x1d44 <main+0x144>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    1d46:	f2 01       	movw	r30, r4
    1d48:	b7 be       	out	0x37, r11	; 55
    1d4a:	e8 95       	spm
	    boot_spm_busy_wait();
    1d4c:	07 b6       	in	r0, 0x37	; 55
    1d4e:	00 fc       	sbrc	r0, 0
    1d50:	fd cf       	rjmp	.-6      	; 0x1d4c <main+0x14c>
    1d52:	a2 01       	movw	r20, r4
    1d54:	a0 e6       	ldi	r26, 0x60	; 96
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    1d58:	8c 91       	ld	r24, X
    1d5a:	12 96       	adiw	r26, 0x02	; 2
    1d5c:	9d 01       	movw	r18, r26
    1d5e:	21 50       	subi	r18, 0x01	; 1
    1d60:	31 09       	sbc	r19, r1
		a |= (*bufPtr++) << 8;
    1d62:	f9 01       	movw	r30, r18
    1d64:	20 81       	ld	r18, Z
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	92 2b       	or	r25, r18
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    1d6a:	fa 01       	movw	r30, r20
    1d6c:	0c 01       	movw	r0, r24
    1d6e:	a7 be       	out	0x37, r10	; 55
    1d70:	e8 95       	spm
    1d72:	11 24       	eor	r1, r1
		addrPtr += 2;
    1d74:	4e 5f       	subi	r20, 0xFE	; 254
    1d76:	5f 4f       	sbci	r21, 0xFF	; 255
	    } while (len -= 2);
    1d78:	fa 12       	cpse	r15, r26
    1d7a:	ee cf       	rjmp	.-36     	; 0x1d58 <main+0x158>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    1d7c:	f2 01       	movw	r30, r4
    1d7e:	97 be       	out	0x37, r9	; 55
    1d80:	e8 95       	spm
	    boot_spm_busy_wait();
    1d82:	07 b6       	in	r0, 0x37	; 55
    1d84:	00 fc       	sbrc	r0, 0
    1d86:	fd cf       	rjmp	.-6      	; 0x1d82 <main+0x182>
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    1d88:	87 be       	out	0x37, r8	; 55
    1d8a:	e8 95       	spm
    1d8c:	3b c0       	rjmp	.+118    	; 0x1e04 <main+0x204>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    1d8e:	84 37       	cpi	r24, 0x74	; 116
    1d90:	59 f5       	brne	.+86     	; 0x1de8 <main+0x1e8>
      uint8_t desttype;
      GETLENGTH(length);
    1d92:	3f d0       	rcall	.+126    	; 0x1e12 <getch>
    1d94:	3e d0       	rcall	.+124    	; 0x1e12 <getch>
    1d96:	f8 2e       	mov	r15, r24

      desttype = getch();
    1d98:	3c d0       	rcall	.+120    	; 0x1e12 <getch>

      verifySpace();
    1d9a:	46 d0       	rcall	.+140    	; 0x1e28 <verifySpace>
    1d9c:	62 01       	movw	r12, r4
    1d9e:	f4 0c       	add	r15, r4
#endif
    default:
	do {
#ifdef VIRTUAL_BOOT_PARTITION
        // Undo vector patch in bottom page so verify passes
	    if (address == rstVect0) ch = rstVect0_sav;
    1da0:	c1 14       	cp	r12, r1
    1da2:	d1 04       	cpc	r13, r1
    1da4:	19 f4       	brne	.+6      	; 0x1dac <main+0x1ac>
    1da6:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <_edata+0x84>
    1daa:	17 c0       	rjmp	.+46     	; 0x1dda <main+0x1da>
	    else if (address == rstVect1) ch = rstVect1_sav;
    1dac:	f1 e0       	ldi	r31, 0x01	; 1
    1dae:	cf 16       	cp	r12, r31
    1db0:	d1 04       	cpc	r13, r1
    1db2:	19 f4       	brne	.+6      	; 0x1dba <main+0x1ba>
    1db4:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <_edata+0x85>
    1db8:	10 c0       	rjmp	.+32     	; 0x1dda <main+0x1da>
	    else if (address == saveVect0) ch = saveVect0_sav;
    1dba:	8e e1       	ldi	r24, 0x1E	; 30
    1dbc:	c8 16       	cp	r12, r24
    1dbe:	d1 04       	cpc	r13, r1
    1dc0:	19 f4       	brne	.+6      	; 0x1dc8 <main+0x1c8>
    1dc2:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <_edata+0x86>
    1dc6:	09 c0       	rjmp	.+18     	; 0x1dda <main+0x1da>
	    else if (address == saveVect1) ch = saveVect1_sav;
    1dc8:	9f e1       	ldi	r25, 0x1F	; 31
    1dca:	c9 16       	cp	r12, r25
    1dcc:	d1 04       	cpc	r13, r1
    1dce:	19 f4       	brne	.+6      	; 0x1dd6 <main+0x1d6>
    1dd0:	80 91 e7 00 	lds	r24, 0x00E7	; 0x8000e7 <_edata+0x87>
    1dd4:	02 c0       	rjmp	.+4      	; 0x1dda <main+0x1da>
	    else ch = pgm_read_byte_near(address);
    1dd6:	f6 01       	movw	r30, r12
    1dd8:	84 91       	lpm	r24, Z
	    address++;
    1dda:	ff ef       	ldi	r31, 0xFF	; 255
    1ddc:	cf 1a       	sub	r12, r31
    1dde:	df 0a       	sbc	r13, r31
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
    1de0:	14 d0       	rcall	.+40     	; 0x1e0a <putch>
	} while (--length);
    1de2:	fc 10       	cpse	r15, r12
    1de4:	dd cf       	rjmp	.-70     	; 0x1da0 <main+0x1a0>
    1de6:	0e c0       	rjmp	.+28     	; 0x1e04 <main+0x204>

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    1de8:	85 37       	cpi	r24, 0x75	; 117
    1dea:	39 f4       	brne	.+14     	; 0x1dfa <main+0x1fa>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    1dec:	1d d0       	rcall	.+58     	; 0x1e28 <verifySpace>
      putch(SIGNATURE_0);
    1dee:	8e e1       	ldi	r24, 0x1E	; 30
    1df0:	0c d0       	rcall	.+24     	; 0x1e0a <putch>
      putch(SIGNATURE_1);
    1df2:	83 e9       	ldi	r24, 0x93	; 147
    1df4:	0a d0       	rcall	.+20     	; 0x1e0a <putch>
      putch(SIGNATURE_2);
    1df6:	87 e0       	ldi	r24, 0x07	; 7
    1df8:	4f cf       	rjmp	.-354    	; 0x1c98 <main+0x98>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    1dfa:	81 35       	cpi	r24, 0x51	; 81
    1dfc:	11 f4       	brne	.+4      	; 0x1e02 <main+0x202>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    1dfe:	88 e0       	ldi	r24, 0x08	; 8
    1e00:	0f d0       	rcall	.+30     	; 0x1e20 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    1e02:	12 d0       	rcall	.+36     	; 0x1e28 <verifySpace>
    }
    putch(STK_OK);
    1e04:	80 e1       	ldi	r24, 0x10	; 16
    1e06:	01 d0       	rcall	.+2      	; 0x1e0a <putch>
  }
    1e08:	37 cf       	rjmp	.-402    	; 0x1c78 <main+0x78>

00001e0a <putch>:
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    1e0a:	5d 9b       	sbis	0x0b, 5	; 11
    1e0c:	fe cf       	rjmp	.-4      	; 0x1e0a <putch>
  UART_UDR = ch;
    1e0e:	8c b9       	out	0x0c, r24	; 12
    1e10:	08 95       	ret

00001e12 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    1e12:	5f 9b       	sbis	0x0b, 7	; 11
    1e14:	fe cf       	rjmp	.-4      	; 0x1e12 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    1e16:	5c 99       	sbic	0x0b, 4	; 11
    1e18:	01 c0       	rjmp	.+2      	; 0x1e1c <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1e1a:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    1e1c:	8c b1       	in	r24, 0x0c	; 12
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1e1e:	08 95       	ret

00001e20 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1e20:	98 e1       	ldi	r25, 0x18	; 24
    1e22:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    1e24:	81 bd       	out	0x21, r24	; 33
    1e26:	08 95       	ret

00001e28 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1e28:	f4 df       	rcall	.-24     	; 0x1e12 <getch>
    1e2a:	80 32       	cpi	r24, 0x20	; 32
    1e2c:	19 f0       	breq	.+6      	; 0x1e34 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1e2e:	88 e0       	ldi	r24, 0x08	; 8
    1e30:	f7 df       	rcall	.-18     	; 0x1e20 <watchdogConfig>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
    1e32:	ff cf       	rjmp	.-2      	; 0x1e32 <verifySpace+0xa>
  }
  putch(STK_INSYNC);
    1e34:	84 e1       	ldi	r24, 0x14	; 20
    1e36:	e9 cf       	rjmp	.-46     	; 0x1e0a <putch>

00001e38 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1e38:	cf 93       	push	r28
    1e3a:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1e3c:	ea df       	rcall	.-44     	; 0x1e12 <getch>
    1e3e:	c1 50       	subi	r28, 0x01	; 1
    1e40:	e9 f7       	brne	.-6      	; 0x1e3c <getNch+0x4>
  verifySpace();
}
    1e42:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1e44:	f1 cf       	rjmp	.-30     	; 0x1e28 <verifySpace>

00001e46 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    1e46:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	ea df       	rcall	.-44     	; 0x1e20 <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    1e4c:	ef e0       	ldi	r30, 0x0F	; 15
    1e4e:	ff 27       	eor	r31, r31
    1e50:	09 94       	ijmp
